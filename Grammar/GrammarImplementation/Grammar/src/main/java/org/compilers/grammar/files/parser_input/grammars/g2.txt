<program>@<lines>@<line>@<statement>@<while_stmt>@<for_stmt>@<if_stmt>@<structured_statement>@<stmt_list>@<statement>@<compound_stmt>@<simple_stmt>@<io_stmt>@<assignment_stmt>@<c_expression>@<c_term>@<c_factor>@<condition>@<expression_list>@<expression>@<term>@<factor>@<declaration_list>@<declaration>@<compound_declaration>@<simple_declaration>@<id_list>@<type>@<array_type>@<simple_type>@<id>@<access_array_element>@<logic_b_op>@<relational_op>@<arithmetic_s_op>@<arithmetic_p_op>@<assignment_b_op>@<assignment_u_op>@<array_element_type>@<array_or_not>@<array_initialisation>@<complex_type>@<id_list_element>@<compound_declaration_element>@<declaration_list_element>@<lines_element>@<term_element>@<expression_element>@<expression_list_element>@<c_factor_element>@<c_expression_element>@<assignment_stmt_element>@<stmt_list_element>@<if_stmt_element>@<condition_element>
id@const@let@const@integer@character@string@read@write@if@then@else@and@or@not@is@isnot@begin@end@for@while@do@=@+=@-=@*=@/=@%=@++@--@+@-@*@/@%@<@<=@>@>=@:@,@;@(@)@[@]
<program>
<assignment_u_op>->++
<assignment_u_op>->--
<assignment_b_op>->=
<assignment_b_op>->+=
<assignment_b_op>->-=
<assignment_b_op>->*=
<assignment_b_op>->/=
<assignment_b_op>->%=
<arithmetic_p_op>->*
<arithmetic_p_op>->/
<arithmetic_p_op>->%
<arithmetic_s_op>->+
<arithmetic_s_op>->-
<relational_op>-><
<relational_op>-><=
<relational_op>->>
<relational_op>->>=
<relational_op>->is
<relational_op>->isnot
<logic_b_op>->and
<logic_b_op>->or
<array_element_type>->id
<array_element_type>->const
<array_or_not>->
<array_or_not>->[`<array_element_type>`]
<id>->id`<array_or_not>
<simple_type>->integer
<simple_type>->character
<simple_type>->string
<array_initialisation>->
<array_initialisation>->const
<complex_type>->
<complex_type>->[`<array_initialisation>`]
<type>-><simple_type>`<complex_type>
<id_list_element>->
<id_list_element>->,`<id_list>
<id_list>->id`<id_list_element>
<simple_declaration>-><id_list>`:`<type>
<compound_declaration_element>->
<compound_declaration_element>->,`<compound_declaration>
<compound_declaration>-><simple_declaration>`<compound_declaration_element>
<declaration>->let`<compound_declaration>`;
<factor>-><id>
<factor>->const
<factor>->(`<expression>`)
<term_element>->
<term_element>-><arithmetic_p_op>`<term>
<term>-><factor>`<term_element>
<expression_element>->
<expression_element>-><arithmetic_s_op>`<expression>
<expression>-><term>`<expression_element>
<expression_list_element>->
<expression_list_element>->,`<expression_list>
<expression_list>-><expression>`<expression_list_element>
<condition_element>-><relational_op>`<expression>
<condition>-><expression>`<condition_element>
<c_factor>-><condition>
<c_factor>->not`(`<condition>`)
<c_factor_element>->
<c_factor_element>->and`<c_term>
<c_term>-><c_factor>`<c_factor_element>
<c_expression_element>->
<c_expression_element>->or`<c_expression>
<c_expression>-><c_term>`<c_expression_element>
<assignment_stmt_element>-><assignment_u_op>
<assignment_stmt_element>-><assignment_b_op>`<expression>
<assignment_stmt>-><id>`<assignment_stmt_element>`;
<io_stmt>->read`(`<id>`)`;
<io_stmt>->write`(`<expression_list>`)`;
<simple_stmt>-><assignment_stmt>
<simple_stmt>-><io_stmt>
<compound_stmt>->begin`<stmt_list>`end
<statement>-><simple_stmt>
<statement>-><structured_statement>
<stmt_list_element>->
<stmt_list_element>-><stmt_list>
<stmt_list>-><statement>`<stmt_list_element>
<structured_statement>-><compound_stmt>
<structured_statement>-><if_stmt>
<structured_statement>-><for_stmt>
<structured_statement>-><while_stmt>
<if_stmt_element>->
<if_stmt_element>->else`<compound_stmt>
<if_stmt>->if`<c_expression>`then`<compound_stmt>`<if_stmt_element>
<for_stmt>->for`<assignment_stmt>`,`<c_expression>`,`<assignment_stmt>`do`<compound_stmt>
<while_stmt>->while`<c_expression>`do`<compound_stmt>
<line>-><declaration>
<line>-><statement>
<lines_element>->
<lines_element>-><lines>
<lines>-><line>`<lines_element>
<program>-><lines>